already done 170506006401014
Ruprecht_147_reduction/fixed_iron_run_no_prior_170506006401014
calculating radial velocities
Wrote profile results to /home/kevin/.config/spyder-py3/lineprofiler.results
Timer unit: 1e-06 s

Total time: 39.1772 s
File: /home/kevin/Documents/Pysme/SME-master/Mine/Payne_machine_solar_finder.py
Function: synth_resolution_degradation at line 601

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   601                                           @profile
   602                                           def synth_resolution_degradation(wave_synth, synth,res_map,res_b,wave_original,l_new_premade=None,kernel_=None,synth_res=300000.0,grad=None):
   603                                                   """
   604                                                   Take a synthetic spectrum with a very high  resolution and degrade its resolution to the resolution profile of the observed spectrum. The synthetic spectrum should not be undersampled, or the result of the convolution might be wrong.
   605                                                   Parameters:
   606                                                       synth np array or similar: an array representing the synthetic spectrum. Must have size m x 2. First column is the wavelength array, second column is the flux array. Resolution of the synthetic spectrum must be constant and higher than that of the observed spectrum.
   607                                                       synth_res (float): resolving power of the synthetic spectrum
   608                                                   Returns:
   609                                                       Convolved syntehtic spectrum as a np array of size m x 2.
   610                                                   """
   611      1180     140968.0    119.5      0.4          synth=np.vstack((wave_synth,synth)).T
   612                                                   
   613      1180        506.7      0.4      0.0          l_original=wave_synth
   614                                                   #check if the shape of the synthetic spectrum is correct
   615      1180       1455.0      1.2      0.0          if synth.shape[1]!=2: logging.error('Syntehtic spectrum must have shape m x 2.')
   616                                           
   617                                                   #check if the resolving power is high enough
   618      1180      70237.2     59.5      0.2          sigma_synth=synth[:,0]/synth_res
   619                                                   # if max(sigma_synth)>=min(res_map)*0.95: logging.error('Resolving power of the synthetic spectrum must be higher.')
   620                                           
   621                                                   #check if wavelength calibration of the synthetic spectrum is linear:
   622      1180       8135.8      6.9      0.0          if abs((synth[:,0][1]-synth[:,0][0])-(synth[:,0][-1]-synth[:,0][-2]))/abs(synth[:,0][1]-synth[:,0][0])>1e-6:
   623                                                       logging.error('Synthetic spectrum must have linear (equidistant) sampling.')        
   624                                           
   625                                                   #current sampling:
   626      1180       1542.5      1.3      0.0          sampl=galah_sampl=synth[:,0][1]-synth[:,0][0]
   627      1180       1129.4      1.0      0.0          galah_sampl=wave_original[1]-wave_original[0]
   628                                           
   629                                           
   630                                                   #original sigma
   631      1180        315.6      0.3      0.0          s_original=sigma_synth
   632                                           
   633                                           
   634                                           
   635                                           
   636                                           
   637                                                   #oversampling. If synthetic spectrum sampling is much finer than the size of the kernel, the code would work, but would return badly sampled spectrum. this is because from here on the needed sampling is measured in units of sigma.
   638      1180       1076.2      0.9      0.0          oversample=galah_sampl/sampl*5.0
   639                                           
   640                                                   #minimal needed sampling
   641                                           
   642                                                   #keep adding samples until end of the wavelength range is reached
   643      1176        537.4      0.5      0.0          if l_new_premade is None:
   644                                                       #required sigma (resample the resolution map into the wavelength range of the synthetic spectrum)
   645         4       1553.5    388.4      0.0              s_out=np.interp(synth[:,0], wave_original, res_map)
   646                                           
   647                                           
   648                                                       #the sigma of the kernel is:
   649         4        899.7    224.9      0.0              s=np.sqrt(s_out**2-s_original**2)
   650                                           
   651                                                       #fit it with the polynomial, so we have a function instead of sampled values:
   652         4      34554.1   8638.5      0.1              map_fit=np.poly1d(np.polyfit(synth[:,0], s, deg=6))
   653                                           
   654                                                       #create an array with new sampling. The first point is the same as in the spectrum:
   655         4          9.2      2.3      0.0              l_new=[synth[:,0][0]]
   656                                           
   657         4      14059.7   3514.9      0.0              min_sampl=max(s_original)/sampl/sampl*oversample
   658                                           
   659         4    1065375.2 266343.8      2.7              l_new=np.array(numba_syth_resolution(map_fit.coef,l_new,sampl,min_sampl,synth[:,0][-1]))
   660         4      29225.6   7306.4      0.1              kernel_=galah_kern(max(s_original)/sampl*oversample, res_b)
   661                                           
   662                                                   else:
   663      1176        404.0      0.3      0.0              l_new=l_new_premade
   664                                                   # while l_new[-1]<synth[:,0][-1]+sampl:
   665                                                   #     l_new.append(l_new[-1]+map_fit(l_new[-1])/sampl/min_sampl)
   666                                           
   667                                                   #interpolate the spectrum to the new sampling:
   668      1180    3137417.4   2658.8      8.0          new_f=np.interp(l_new,synth[:,0],synth[:,1])
   669                                           
   670                                                   # con_f=ndimage.convolve(new_f, kernel_, output=x)
   671      1180   33188451.0  28125.8     84.7          con_f=signal.fftconvolve(new_f,kernel_,mode='same')
   672                                           
   673                                                   #inverse the warping:
   674      1180    1475761.2   1250.6      3.8          synth[:,1]=np.interp(l_original,l_new,con_f)
   675      1176       1384.9      1.2      0.0          if l_new_premade is None:
   676         4          5.1      1.3      0.0              return synth[:,1],l_new,kernel_
   677      1176        682.6      0.6      0.0          if not grad is None:
   678                                                       new_grad=[np.interp(np.array(l_new),synth[:,0],x) for x in grad]
   679                                                       con_grad=[signal.fftconvolve(x,kernel_,mode='same') for x in new_grad]
   680                                                       grad=[np.interp(l_original,np.array(l_new),x) for x in con_grad]
   681                                                       return synth[:,1],grad
   682                                           
   683      1176       1541.1      1.3      0.0          return synth[:,1]

Total time: 72.9326 s
File: /home/kevin/Documents/Pysme/SME-master/Mine/Payne_machine_solar_finder.py
Function: synthesize at line 1311

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
  1311                                               @profile
  1312                                               def synthesize(self,shift={},colours=None,multi=False,give_back=False,full=False,grad=False):
  1313       295        490.6      1.7      0.0          if colours==None:
  1314       295        279.5      0.9      0.0              colours=self.bands
  1315                                           
  1316       295         77.8      0.3      0.0          if full and not give_back:
  1317                                                       print('you probably want the spectrum back run again with give_back=True')
  1318                                                       return False
  1319       294        196.9      0.7      0.0          if not give_back:
  1320         1          0.1      0.1      0.0              if not multi:
  1321         4          1.7      0.4      0.0                  for x in colours:       
  1322         4        353.4     88.3      0.0                      solar_values=self.solar_value_maker(shift,x)
  1323         4      73813.9  18453.5      0.1                      dopler_shifted_spectra = payne_sythesize(solar_values,rgetattr(self,x+'.x_min'),rgetattr(self,x+'.x_max'),rgetattr(self,x+'.NN_coeff'))
  1324         4         11.3      2.8      0.0                      if 'vrad_'+x in shift:
  1325                                                                   dopler_shifted_synth_wave,spectrum_shifted=dopler(rgetattr(self,x+'.wave'),shift['vrad_'+x],synthetic_wavelength=rgetattr(self,x+'.wave_synth'),synthetic_spectra=dopler_shifted_spectra)
  1326                                                               else:
  1327         4       3098.1    774.5      0.0                          dopler_shifted_synth_wave,spectrum_shifted=dopler(rgetattr(self,x+'.wave'),rgetattr(self,x+'.vrad'),synthetic_wavelength=rgetattr(self,x+'.wave_synth'),synthetic_spectra=dopler_shifted_spectra)
  1328         4         33.2      8.3      0.0                      if rgetattr(self,x+'.l_new') is None:
  1329         4    1259353.9 314838.5      1.7                          dopler_shifted_spectra,l_new,kernel=synth_resolution_degradation(
  1330         4          0.5      0.1      0.0                              wave_synth=dopler_shifted_synth_wave,
  1331         4          0.6      0.1      0.0                              synth=spectrum_shifted,
  1332         4         75.8     19.0      0.0                              res_map=rgetattr(self,x+'.hermes')[7].data,
  1333         4        567.6    141.9      0.0                              res_b=rgetattr(self,x+'.hermes')[7].header['b'],
  1334         4         15.6      3.9      0.0                              wave_original=rgetattr(self,x+'.wave')
  1335                                                                       )
  1336         4         59.8     14.9      0.0                          rsetattr(self,x+'.l_new',l_new)
  1337         4         14.9      3.7      0.0                          rsetattr(self,x+'.kernel',kernel)
  1338                                                               else:
  1339                                                                   dopler_shifted_spectra=synth_resolution_degradation(
  1340                                                                       wave_synth=dopler_shifted_synth_wave,
  1341                                                                       synth=spectrum_shifted,
  1342                                                                       res_map=rgetattr(self,x+'.hermes')[7].data,
  1343                                                                       res_b=rgetattr(self,x+'.hermes')[7].header['b'],
  1344                                                                       wave_original=rgetattr(self,x+'.wave'),
  1345                                                                       l_new_premade=rgetattr(self,x+'.l_new'),
  1346                                                                       kernel_=rgetattr(self,x+'.kernel'))
  1347         4      12395.9   3099.0      0.0                      dopler_shifted_spectra=scipy.interpolate.CubicSpline(dopler_shifted_synth_wave,dopler_shifted_spectra)(rgetattr(self,x+'.wave'))
  1348         4         39.0      9.7      0.0                      rsetattr(self,x+'.synth',dopler_shifted_spectra)
  1349                                                       else:
  1350                                                           with Pool(4) as pool:
  1351                                                               inputs=[(shift,x,False,False) for x in colours]
  1352                                                               pool.map(getattr(self,'synthesize'),inputs)
  1353                                                           # with ThreadPool(4) as pool:
  1354                                                           #     inputs=[(shift,x,False,False) for x in colours]
  1355                                                           #     pool.map(getattr(self,'synthesize'),inputs)
  1356                                                           
  1357                                                   else:
  1358       294        110.5      0.4      0.0              if not multi:
  1359       294        160.9      0.5      0.0                  if grad:
  1360                                                               
  1361                                                               returning_spectra=np.array(np.ones(len(colours)),dtype=object)
  1362                                                               returning_grad=np.array(np.ones(len(colours)),dtype=object)
  1363                                                               for number,x in enumerate(colours):       
  1364                                                                   solar_values=self.solar_value_maker(shift,x)
  1365                                           
  1366                                                                   spectrum,grad_spec = payne_sythesize(solar_values,rgetattr(self,x+'.x_min'),rgetattr(self,x+'.x_max'),rgetattr(self,x+'.NN_coeff'),grad=True)
  1367                                                                   if full:
  1368                                                                       returning_spectra[number]=spectrum
  1369                                                                       continue   
  1370                                                                   if 'vrad_'+x in shift:
  1371                                                                       dopler_shifted_spectra,grad_spec=dopler(rgetattr(self,x+'.wave'),spectrum,shift['vrad_'+x],synthetic_wavelength=rgetattr(self,x+'.wave_synth'),grad=grad_spec)
  1372                                                                   else:
  1373                                                                       dopler_shifted_spectra,grad_spec=dopler(rgetattr(self,x+'.wave'),spectrum,rgetattr(self,x+'.vrad'),synthetic_wavelength=rgetattr(self,x+'.wave_synth'),grad=grad_spec)
  1374                                           
  1375                                                                   # if rgetattr(self,x+'.l_new') is None:
  1376                                                                       
  1377                                                                   #     dopler_shifted_spectra,l_new,kernel,grad_dopler=synth_resolution_degradation(rgetattr(self,x+'.wave'),dopler_shifted_spectra,rgetattr(self,x+'.hermes')[7].data,rgetattr(self,x+'.hermes')[7].header['b'],rgetattr(self,x+'.wave'),grad=grad_spec)
  1378                                                                   #     rsetattr(self,x+'.l_new',l_new)
  1379                                                                   #     rsetattr(self,x+'.kernel',kernel)
  1380                                           
  1381                                                                   # else:
  1382                                                                   #     dopler_shifted_spectra,grad_dopler=synth_resolution_degradation(rgetattr(self,x+'.wave'),dopler_shifted_spectra,rgetattr(self,x+'.hermes')[7].data,rgetattr(self,x+'.hermes')[7].header['b'],rgetattr(self,x+'.wave'),rgetattr(self,x+'.l_new'),rgetattr(self,x+'.kernel'),grad=grad_spec)
  1383                                                                   # returning_grad[number]=grad_dopler
  1384                                                                   returning_spectra[number]=dopler_shifted_spectra
  1385                                                               return returning_spectra,returning_grad
  1386                                                           else:
  1387       294       1491.1      5.1      0.0                      returning_spectra=[[0] for x in range(len(colours))]
  1388      1176       1372.3      1.2      0.0                      for number,x in enumerate(colours):       
  1389      1176      66765.2     56.8      0.1                          solar_values=self.solar_value_maker(shift,x)
  1390                                               
  1391      1176   27313928.5  23226.1     37.5                          dopler_shifted_spectra = payne_sythesize(solar_values,rgetattr(self,x+'.x_min'),rgetattr(self,x+'.x_max'),rgetattr(self,x+'.NN_coeff'))
  1392      1176       1656.1      1.4      0.0                          if full:
  1393                                                                       returning_spectra[number]=spectrum
  1394                                                                       continue                   
  1395       834       2551.9      3.1      0.0                          if 'vrad_'+x in shift:
  1396       834     881316.4   1056.7      1.2                              dopler_shifted_synth_wave,spectrum_shifted=dopler(rgetattr(self,x+'.wave'),shift['vrad_'+x],synthetic_wavelength=rgetattr(self,x+'.wave_synth'),synthetic_spectra=dopler_shifted_spectra)
  1397                                                                   else:
  1398       342     321293.9    939.5      0.4                              dopler_shifted_synth_wave,spectrum_shifted=dopler(rgetattr(self,x+'.wave'),rgetattr(self,x+'.vrad'),synthetic_wavelength=rgetattr(self,x+'.wave_synth'),synthetic_spectra=dopler_shifted_spectra)
  1399      1176      13731.1     11.7      0.0                          if rgetattr(self,x+'.l_new') is None:
  1400                                                                       dopler_shifted_spectra,l_new,kernel=synth_resolution_degradation(
  1401                                                                           wave_synth=dopler_shifted_synth_wave,
  1402                                                                           synth=spectrum_shifted,
  1403                                                                           res_map=rgetattr(self,x+'.hermes')[7].data,
  1404                                                                           res_b=rgetattr(self,x+'.hermes')[7].header['b'],
  1405                                                                           wave_original=rgetattr(self,x+'.wave')
  1406                                                                           )
  1407                                                                       rsetattr(self,x+'.l_new',l_new)
  1408                                                                       rsetattr(self,x+'.kernel',kernel)
  1409                                                                   else:
  1410      1176   37966758.3  32284.7     52.1                              dopler_shifted_spectra=synth_resolution_degradation(
  1411      1176        218.2      0.2      0.0                                  wave_synth=dopler_shifted_synth_wave,
  1412      1176        288.1      0.2      0.0                                  synth=spectrum_shifted,
  1413      1176      27407.1     23.3      0.0                                  res_map=rgetattr(self,x+'.hermes')[7].data,
  1414      1176      93478.4     79.5      0.1                                  res_b=rgetattr(self,x+'.hermes')[7].header['b'],
  1415      1176       5109.3      4.3      0.0                                  wave_original=rgetattr(self,x+'.wave'),
  1416      1176       3282.3      2.8      0.0                                  l_new_premade=rgetattr(self,x+'.l_new'),
  1417      1176       3236.5      2.8      0.0                                  kernel_=rgetattr(self,x+'.kernel'))
  1418      1176    4875554.7   4145.9      6.7                          dopler_shifted_spectra=scipy.interpolate.CubicSpline(dopler_shifted_synth_wave,dopler_shifted_spectra)(rgetattr(self,x+'.wave'))
  1419      1176       1959.8      1.7      0.0                          returning_spectra[number]=dopler_shifted_spectra
  1420       294         61.3      0.2      0.0                      return returning_spectra
  1421                                                       else :
  1422                                                           with ThreadPool() as pool:
  1423                                                               inputs=[(shift,x,False,True) for x in colours]
  1424                                                               return pool.map(partial(self.synthesize_multi,shift=shift),colours)
  1425                                                               # pool.map(partial(getattr(self,'synthesize_multi'),give_back=True,shift=shift),colours=colours)

